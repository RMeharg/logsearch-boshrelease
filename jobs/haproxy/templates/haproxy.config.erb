global
    <%
      syslog_server = nil
      respond_to?(:if_link) && if_link("syslog_forwarder") do |syslog_forwarder|
        syslog_server = link('syslog_forwarder').instances.first.address
      end.else do
        syslog_server = p("haproxy.syslog_server")
      end
    %>
    log <%= syslog_server %> syslog <%= p('haproxy.log_level') %>
    log-tag ls-router
    daemon
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param 2048
    <% if p("haproxy.enable_stats_socket") %>
    stats socket /var/vcap/sys/run/haproxy/stats
    <% end %>

defaults
    log global
    maxconn 64000
    option contstats
    option tcplog
    timeout connect         <%= p("haproxy.connect_timeout") %>s
    timeout client          <%= p("haproxy.client_timeout") %>s
    timeout server          <%= p("haproxy.server_timeout") %>s
    timeout queue           <%= p("haproxy.queue_timeout") %>s

frontend syslog-in
    mode tcp

    <% if properties.haproxy.ssl_pem and properties.haproxy.ingestor.enable_ssl == true %>
    bind :<%= p("haproxy.ingestor.syslog.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.ingestor.syslog.inbound_port") %>
    <% end %>

    default_backend ingestors-syslog

backend ingestors-syslog
    mode tcp
    balance roundrobin
    <%
      ingestor_nodes = nil
      respond_to?(:if_link) && if_link("ingestor") do |ingestor|
        ingestor_nodes = link('ingestor').instances.map { |instance| instance.address }
      end.else do
        ingestor_nodes = p("haproxy.ingestor.backend_servers")
      end
    %>
    <% ingestor_nodes.each_with_index do |ip, index| %>
    server ingestor<%= index %> <%= ip %>:<%= p("haproxy.ingestor.syslog.backend_port") %> check inter 1000
    <% end %>

frontend syslog-tls-in
    mode tcp
    <% if properties.haproxy.ssl_pem and properties.haproxy.ingestor.enable_ssl == true %>
    bind :<%= p("haproxy.ingestor.tls.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.ingestor.tls.inbound_port") %>
    <% end %>
    default_backend ingestors-syslog-tls

backend ingestors-syslog-tls
    mode tcp
    balance roundrobin
    <%
      ingestor_nodes = nil
      respond_to?(:if_link) && if_link("ingestor") do |ingestor|
        ingestor_nodes = link('ingestor').instances.map { |instance| instance.address }
      end.else do
        ingestor_nodes = p("haproxy.ingestor.backend_servers")
      end
    %>
    <% ingestor_nodes.each_with_index do |ip, index| %>
    server ingestor<%= index %> <%= ip %>:<%= p("haproxy.ingestor.tls.backend_port") %> check inter 1000
    <% end %>

frontend relp-in
    mode tcp

    <% if properties.haproxy.ssl_pem and properties.haproxy.ingestor.enable_ssl == true %>
    bind :<%= p("haproxy.ingestor.relp.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.ingestor.relp.inbound_port") %>
    <% end %>

    default_backend ingestors-relp

backend ingestors-relp
    mode tcp
    balance roundrobin
    <%
      ingestor_nodes = nil
      respond_to?(:if_link) && if_link("ingestor") do |ingestor|
        ingestor_nodes = link('ingestor').instances.map { |instance| instance.address }
      end.else do
        ingestor_nodes = p("haproxy.ingestor.backend_servers")
      end
    %>
    <% ingestor_nodes.each_with_index do |ip, index| %>
    server ingestor<%= index %> <%= ip %>:<%= p("haproxy.ingestor.relp.backend_port") %> check inter 1000
    <% end %>

frontend kibana-in
    mode http

    bind :<%= p("haproxy.kibana.inbound_port.http") %>
    <% if properties.haproxy.ssl_pem and properties.haproxy.kibana.enable_ssl == true %>
    bind :<%= p("haproxy.kibana.inbound_port.https") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% end %>

    <% if p('haproxy.kibana.auth.username') != "" %>
    acl logged_in http_auth(kibana-user)
    http-request auth realm "Logs UI" if !logged_in
    <% end %>

    default_backend kibana

backend kibana
    mode http
    balance roundrobin
    <%
      kibana_nodes = nil
      respond_to?(:if_link) && if_link("kibana") do |kibana|
        kibana_nodes = link('kibana').instances.map { |instance| instance.address }
      end.else do
        kibana_nodes = p("haproxy.kibana.backend_servers")
      end
    %>
    <% kibana_nodes.each_with_index do |ip, index| %>
    server kibana<%= index %> <%= ip %>:<%= p("haproxy.kibana.backend_port") %> check inter 1000
    <% end %>

frontend cluster_monitor-in
    mode http

    <% if properties.haproxy.ssl_pem %>
    bind :<%= p("haproxy.cluster_monitor.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.cluster_monitor.inbound_port") %>
    <% end %>

    <% if p('haproxy.cluster_monitor.auth.username') != "" %>
    acl logged_in http_auth(cluster-monitor-user)
    http-request auth realm "Cluster Health UI" if !logged_in
    <% end %>

    default_backend cluster_monitor

backend cluster_monitor
    mode http
    balance roundrobin
    <%
      cluster_monitor_nodes = nil
      respond_to?(:if_link) && if_link("syslog_forwarder") do |syslog_forwarder|
        cluster_monitor_nodes = link('syslog_forwarder').instances.map { |instance| instance.address }
      end.else do
        cluster_monitor_nodes = p("haproxy.cluster_monitor.backend_servers")
      end
    %>
    <% cluster_monitor_nodes.each_with_index do |ip, index| %>
    server cluster_monitor<%= index %> <%= ip %>:<%= p("haproxy.cluster_monitor.backend_port") %> check inter 1000
    <% end %>

<% if p("haproxy.elastic.inbound_port", nil) %>
frontend elastic-in
    mode http

    <% if properties.haproxy.ssl_pem and properties.haproxy.elastic.enable_ssl == true %>
    bind :<%= p("haproxy.elastic.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.elastic.inbound_port") %>
    <% end %>

    <% if properties.haproxy.elastic.auth.username %>
    acl logged_in http_auth(elastic-user)
    http-request auth realm "Elasticsearch" if !logged_in
    <% end %>


    default_backend elastic

backend elastic
    mode http
    balance roundrobin
    <%
      elasticsearch_nodes = nil
      respond_to?(:if_link) && if_link("elasticsearch") do |elasticsearch|
        elasticsearch_nodes = link('elasticsearch').instances.map { |instance| instance.address }
      end.else do
        elasticsearch_nodes = p("haproxy.elastic.backend_servers")
      end
    %>
    <% elasticsearch_nodes.each_with_index do |ip, index| %>
    server elastic<%= index %> <%= ip %>:9000 check inter 1000
    <% end %>


<% if p('haproxy.elastic.auth.username') != "" %>
userlist elastic-user
    user <%= p('haproxy.elastic.auth.username') %> insecure-password <%= p('haproxy.elastic.auth.password') %>
<% end %>

<% end # elastic proxy %>

<% if p('haproxy.kibana.auth.username') != "" %>
userlist kibana-user
    user <%= p('haproxy.kibana.auth.username') %> insecure-password <%= p('haproxy.kibana.auth.password') %>
<% end %>

<% if p('haproxy.cluster_monitor.auth.username') != "" %>
userlist cluster-monitor-user
    user <%= p('haproxy.cluster_monitor.auth.username') %> insecure-password <%= p('haproxy.cluster_monitor.auth.password') %>
<% end %>

